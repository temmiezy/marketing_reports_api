<?php

namespace AppBundle\Repository;

/**
 * KpOrganicAppsDailyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KpOrganicAppsDailyRepository extends \Doctrine\ORM\EntityRepository
{
    public function getStateDaily($state, $type, $year, $month)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "r.dayNum as day, SUM(r.organicApps) as total_count, r.month as month"
        )
            ->where("r.month = :month")
            ->andWhere("r.year = :year")
            ->andWhere('r.state = :state')
            ->groupBy('r.dayNum')
            ->orderBy('r.dayNum')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
            ->setParameter('state', $state)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getAllStateDailyTable($state, $year, $month)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT day_num as day, month, year, SUM(organic_apps) as organic_apps,
         (SELECT SUM(organic_calls) from kp_organic_calls_daily c where year = :year and month=:month and c.day_num = r.day_num) as organic_calls,
         (SELECT SUM(ppc_apps) from kp_ppc_apps_daily p where year = :year and month=:month and p.day_num = r.day_num) as ppc,
         (SELECT SUM(calls_locals) from kp_local_calls_daily d where year = :year and month=:month and d.day_num = r.day_num) as local_calls
         FROM kp_organic_apps_daily r WHERE r.year = :year AND r.month = :month GROUP BY day";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year' , $year);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function getDataDate(){
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dataDate")
            ->orderBy('r.dataDate', 'DESC')
            ->setMaxResults(1);
        $result = $query->getQuery()->getResult();

        return $result;
    }
}
