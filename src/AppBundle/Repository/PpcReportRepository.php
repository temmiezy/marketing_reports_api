<?php

namespace AppBundle\Repository;

/**
 * PpcReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PpcReportRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllByTypeDate($year, $month)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT day(STR_TO_DATE(app_date, '%m/%d/%Y')) as day,
         month(STR_TO_DATE(app_date, '%m/%d/%Y')) as month,
         (SELECT sum(app_count) FROM ppc_type_state WHERE ppc_type_state.type='manual entry' and day(STR_TO_DATE(app_date, '%m/%d/%Y'))=day AND month(STR_TO_DATE(app_date, '%m/%d/%Y'))=:month AND year(STR_TO_DATE(app_date, '%m/%d/%Y'))=:year) as manual_entry,
         (SELECT sum(app_count) FROM ppc_type_state WHERE ppc_type_state.type='organic' and day(STR_TO_DATE(app_date, '%m/%d/%Y'))=day  AND month(STR_TO_DATE(app_date, '%m/%d/%Y'))=:month AND year(STR_TO_DATE(app_date, '%m/%d/%Y'))=:year) as organic,
         (SELECT sum(app_count) FROM ppc_type_state WHERE ppc_type_state.type='ppc' and day(STR_TO_DATE(app_date, '%m/%d/%Y'))=day  AND month(STR_TO_DATE(app_date, '%m/%d/%Y'))=:month AND year(STR_TO_DATE(app_date, '%m/%d/%Y'))=:year) as ppc
         FROM ppc_type_state WHERE month(STR_TO_DATE(app_date, '%m/%d/%Y'))=:month AND year(STR_TO_DATE(app_date, '%m/%d/%Y'))=:year GROUP BY day";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue('month', $month);
        $stmt->bindValue('year', $year);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function getManualEntryCount($year, $month){

        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dayNum as day, month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as month, SUM(r.appCount) as manual_entry")
            ->where("r.type = 'manual entry'")
            ->andWhere("month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :year")
            ->groupBy("r.dayNum")
            ->orderBy("r.dayNum")
            ->setParameter("month", $month)
            ->setParameter("year", $year)
            ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getOrganicCount($year, $month){

        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dayNum as day, month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as month, SUM(r.appCount) as organic")
            ->where("r.type = 'organic'")
            ->andWhere("month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :year")
            ->groupBy("r.dayNum")
            ->orderBy("r.dayNum")
            ->setParameter("month", $month)
            ->setParameter("year", $year)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getPpcCount($year, $month){

        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dayNum as day, month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as month, SUM(r.appCount) as ppc")
            ->where("r.type = 'ppc'")
            ->andWhere("month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :year")
            ->groupBy("r.dayNum")
            ->orderBy("r.dayNum")
            ->setParameter("month", $month)
            ->setParameter("year", $year)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getAllCount($year, $month){
        $manual_entry = $this->getManualEntryCount($year, $month);
        $organic = $this->getOrganicCount($year, $month);
        $ppc = $this->getPpcCount($year, $month);
        $result_array = array();
        for($x=0; $x<count($ppc); $x++){
            if(isset($ppc[$x])){
                $result_array[$x]['day'] = $ppc[$x]['day'];
                $result_array[$x]['month'] = $ppc[$x]['month'];
                $result_array[$x]['ppc'] = $ppc[$x]['ppc'];
            }
            if(isset($manual_entry[$x])){
                $result_array[$x]['manual_entry'] = $manual_entry[$x]['manual_entry'];
            }
            if(isset($organic[$x])){
                $result_array[$x]['organic'] = $organic[$x]['organic'];
            }

        }
        return $result_array;
    }

    public function getByType($year, $month)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "MONTHNAME(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as month,
            SUM(r.appCount) as total_count, r.type"
        )
            ->where("month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :year")
            ->groupBy('r.type')
            ->orderBy('r.type')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }
    public function getByAllState($state,$type,$year,$month)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            " r.type, SUM(r.appCount) as total_count,
            month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as month,
            year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) as year,
            r.appState as state"
        )
            ->where("month(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.appDate, '%m/%d/%Y')) = :year")
            ->andWhere("r.type = :type")
            ->andWhere("r.appState = :state")
            ->groupBy('r.appState, month')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
            ->setParameter('type', $type)
            ->setParameter('state', $state)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getDataId(){
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dataId")
            ->orderBy('r.dataId', 'DESC')
            ->setMaxResults(1);
        $result = $query->getQuery()->getResult();

        return $result;
    }
}
