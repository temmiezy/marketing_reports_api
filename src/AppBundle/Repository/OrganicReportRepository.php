<?php

namespace AppBundle\Repository;

/**
 * OrganicReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganicReportRepository extends \Doctrine\ORM\EntityRepository
{
    /*
     * This retrieve day,month, year and count from the database
     * for the graph on the dashboard,
     */
    public function getByCountDayMonth($year, $month)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "day(STR_TO_DATE(r.date, '%m/%d/%Y')) as day,
            month(STR_TO_DATE(r.date, '%m/%d/%Y')) as month,
            year(STR_TO_DATE(r.date, '%m/%d/%Y')) as year,
            SUM(r.count) as total_count"
        )
            ->where("month(STR_TO_DATE(r.date, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.date, '%m/%d/%Y')) = :year")
            ->groupBy('day')
            ->distinct('day')
            ->orderBy('day')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getByYearMonthAction($year, $month)
    {
        $date = new \DateTime("{$year}-{$month}-01");

        $qb = $this->createQueryBuilder('r');
        $query = $qb->where("STR_TO_DATE(r.date, '%m/%d/%Y') BETWEEN :start AND :end")
            ->setParameter('start', $date->format('Y-m-d'))
            ->setParameter('end', $date->format('Y-m-t'))
        ;
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getAllState($year, $month)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "day(STR_TO_DATE(r.date, '%m/%d/%Y')) as day,
            r.state as state, SUM(r.count) as total_count"
        )
            ->where("month(STR_TO_DATE(r.date, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.date, '%m/%d/%Y')) = :year")
            ->groupBy('day, state')
            //->groupBy('state')
            ->orderBy('day', 'asc')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
        ;
        $restresult = $query->getQuery()->getArrayResult();
        return $restresult;
    }

    public function getByState($state,$year, $month)
    {
        $date = new \DateTime("{$year}-{$month}-01");
        $qb = $this->createQueryBuilder('r');
        $query = $qb->where("STR_TO_DATE(r.date, '%m/%d/%Y') BETWEEN :start AND :end")
            ->andWhere('r.state = :state')
            ->orderBy('r.state')
            ->setParameter('start', $date->format('Y-m-d'))
            ->setParameter('end', $date->format('Y-m-t'))
            ->setParameter('state', $state);
        $restresult = $query->getQuery()->getArrayResult();
        return $restresult;
    }

    public function getOneByYearMonthDay($year, $month, $day)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "r.referrer as referrer_name, SUM(r.count) as total_count"
        )
            ->where("day(STR_TO_DATE(r.date, '%m/%d/%Y')) = :day")
            ->andWhere("month(STR_TO_DATE(r.date, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.date, '%m/%d/%Y')) = :year")
            ->groupBy('r.referrer')
            ->setParameter('day', $day)
            ->setParameter('month', $month)
            ->setParameter('year', $year);
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getOneByStateYearMonthDay($state, $year, $month, $day)
    {
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select(
            "r.referrer as referrer_name, r.count as total_count"
        )
            ->where("day(STR_TO_DATE(r.date, '%m/%d/%Y')) = :day")
            ->andWhere("month(STR_TO_DATE(r.date, '%m/%d/%Y')) = :month")
            ->andWhere("year(STR_TO_DATE(r.date, '%m/%d/%Y')) = :year")
            ->andWhere('r.state = :state')
            ->setParameter('day', $day)
            ->setParameter('month', $month)
            ->setParameter('year', $year)
            ->setParameter('state', $state);
        $restresult = $query->getQuery()->getResult();
        return $restresult;
    }

    public function getDataId(){
        $qb = $this->createQueryBuilder('r');
        $query = $qb->select("r.dataId")
            ->orderBy('r.dataId', 'DESC')
            ->setMaxResults(1);
        $result = $query->getQuery()->getResult();

        return $result;
    }
}
